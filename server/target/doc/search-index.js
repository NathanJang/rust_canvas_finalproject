var searchIndex = {};
searchIndex["shared_canvas"] = {"doc":"|_________| is human nature. You, and you alone, are responsible for your own actions. With great power comes great responsibility. You may choose to use your power to work with others and make something beautiful, or you may choose to use your power for selfish purposes. Choose wisely.","items":[[0,"canvas","shared_canvas","Contains implementation for a shared canvas. Interfaces with the `sharing_is_caring` model, where the canvas is the universe, and each pixel is an atom.",null,null],[3,"Canvas","shared_canvas::canvas","Canvas struct implements the server side's implementation of the canvas. It keeps track of the width, height, pixels, and the pixel_size to be used to draw the canvas on the client-side. This is the universe in the `sharing_is_caring` model.",null,null],[3,"Pixel","","The Pixel struct represents a single pixel (square) on the canvas.",null,null],[12,"id","","The id of the pixel. Useful for updating specific pixels in both the server and client side.",0,null],[12,"color","","A `RGB8` object of a simple RGB container.",0,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Default constructor.",1,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"self"}}],[11,"as_json","","",1,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"update_atom","","",1,{"inputs":[{"name":"self"},{"name":"pixel"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"pixel"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"pixel"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_json","","",0,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"from_json","","",0,{"inputs":[{"name":"jsonvalue"}],"output":{"name":"option"}}],[0,"responder","shared_canvas","Contains implementation for responding to client requests.",null,null],[3,"CanvasResponder","shared_canvas::responder","An empty struct that implements the trait methods for our canvas server.",null,null],[11,"respond_to_request","","",2,{"inputs":[{"name":"self"},{"name":"jsonvalue"},{"generics":["canvas"],"name":"shareduniverse"}],"output":{"name":"response"}}]],"paths":[[3,"Pixel"],[3,"Canvas"],[3,"CanvasResponder"]]};
searchIndex["sharing_is_caring"] = {"doc":"`sharing_is_caring` is a generic libary for writing WebSocket servers with an environment shared across multiple web clients. Applications include a shared \"canvas\" where users can paint on, or a shared text document where users can edit lines.","items":[[4,"JsonValue","sharing_is_caring","",null,null],[13,"Null","","",0,null],[13,"Short","","",0,null],[13,"String","","",0,null],[13,"Number","","",0,null],[13,"Boolean","","",0,null],[13,"Object","","",0,null],[13,"Array","","",0,null],[0,"server","","Contains implementation for a generic WebSocket server for objects that interface with traits in `universe`.",null,null],[3,"Server","sharing_is_caring::server","The server object that defines behavior during the lifetime of our program.",null,null],[3,"ClientHandler","","A struct that contains the implementation for behavior associated with a single client, like when responding to a single client's requests. For now, all client handlers are created equal because we treat all our clients equally, and so the fields in these objects are all the same. However, this struct gives room for expansion.",null,null],[4,"Response","","",null,null],[13,"None","","",1,null],[13,"Reply","","",1,null],[13,"Broadcast","","",1,null],[6,"SharedUniverse","","",null,null],[8,"Responder","","A trait for objects that can respond to requests from web clients.",null,null],[10,"respond_to_request","","Takes the request JSON and a mutable reference to the universe, mutates accordingly, and outputs a response JSON.",2,{"inputs":[{"name":"self"},{"name":"jsonvalue"},{"name":"shareduniverse"}],"output":{"name":"response"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new server with the given universe, name of our server, and a function to generate a response whenever we receive a request.",3,{"inputs":[{"name":"u"},{"name":"r"}],"output":{"name":"self"}}],[11,"as_client_handler","","Creates a `ClientHandler` instance from the object.",3,{"inputs":[{"name":"self"},{"name":"sender"}],"output":{"name":"clienthandler"}}],[11,"listen","","",3,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"connection_made","","",3,null],[11,"client_connected","","",3,null],[11,"on_message","","",4,{"inputs":[{"name":"self"},{"name":"message"}],"output":{"name":"result"}}],[0,"universe","sharing_is_caring","Contains traits for our universe-atom model.",null,null],[8,"Universe","sharing_is_caring::universe","Trait for objects that represent a universe in our model.",null,null],[10,"update_atom","","Called when we receive a request to update an atom in our universe.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":null}],[8,"Atom","","Trait for objects that represent atoms in this model. For now, it just means we can convert to and from JSONs, but future extensions are possible.",null,null],[0,"json_convertible","sharing_is_caring","Traits for objects that are convertible to and from JSON values.",null,null],[4,"JsonValue","sharing_is_caring::json_convertible","",null,null],[13,"Null","","",0,null],[13,"Short","","",0,null],[13,"String","","",0,null],[13,"Number","","",0,null],[13,"Boolean","","",0,null],[13,"Object","","",0,null],[13,"Array","","",0,null],[8,"AsJson","","Trait for objects representable as a JSON value.",null,null],[10,"as_json","","Represents `self` as a JSON value.",6,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[8,"FromJson","","Trait for objects convertible from a JSON value.",null,null],[10,"from_json","","Constructs an instance from the JSON, if possible.",7,{"inputs":[{"name":"jsonvalue"}],"output":{"name":"option"}}],[11,"new_object","","Create an empty `JsonValue::Object` instance. When creating an object with data, consider using the `object!` macro.",0,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"new_array","","Create an empty `JsonValue::Array` instance. When creating array with data, consider using the `array!` macro.",0,{"inputs":[],"output":{"name":"jsonvalue"}}],[11,"dump","","Prints out the value as JSON string.",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"pretty","","Pretty prints out the value as JSON string. Takes an argument that's number of spaces to indent new blocks with.",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"string"}}],[11,"to_writer","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",0,null],[11,"write","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_pretty","","Writes the JSON as byte stream into an implementor of `std::io::Write`.",0,{"inputs":[{"name":"self"},{"name":"w"},{"name":"u16"}],"output":{"generics":["error"],"name":"result"}}],[11,"is_string","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_number","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_boolean","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_null","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_object","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_array","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_empty","","Checks whether the value is empty. Returns true for:",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_str","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_number","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["number"],"name":"option"}}],[11,"as_f64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"option"}}],[11,"as_f32","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"option"}}],[11,"as_u64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_u32","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"option"}}],[11,"as_u16","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"as_u8","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"option"}}],[11,"as_usize","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"as_i32","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"as_i16","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"option"}}],[11,"as_i8","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"option"}}],[11,"as_isize","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"option"}}],[11,"as_bool","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"option"}}],[11,"as_fixed_point_u64","","Obtain an integer at a fixed decimal point. This is useful for converting monetary values and doing arithmetic on them without rounding errors introduced by floating point operations.",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["u64"],"name":"option"}}],[11,"as_fixed_point_i64","","Analog to `as_fixed_point_u64`, except returning a signed `i64`, properly handling negative numbers.",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"generics":["i64"],"name":"option"}}],[11,"take","","Take over the ownership of the value, leaving `Null` in it's place.",0,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"take_string","","Checks that self is a string, returns an owned Rust `String`, leaving `Null` in it's place.",0,{"inputs":[{"name":"self"}],"output":{"generics":["string"],"name":"option"}}],[11,"push","","Works on `JsonValue::Array` - pushes a new value to the array.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"pop","","Works on `JsonValue::Array` - remove and return last element from an array. On failure returns a null.",0,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"contains","","Works on `JsonValue::Array` - checks if the array contains a value",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"has_key","","Works on `JsonValue::Object` - checks if the object has a key",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"len","","Returns length of array or object (number of keys), defaults to `0` for other types.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"members","","Works on `JsonValue::Array` - returns an iterator over members. Will return an empty iterator if called on non-array types.",0,{"inputs":[{"name":"self"}],"output":{"generics":["jsonvalue"],"name":"iter"}}],[11,"members_mut","","Works on `JsonValue::Array` - returns a mutable iterator over members. Will return an empty iterator if called on non-array types.",0,{"inputs":[{"name":"self"}],"output":{"generics":["jsonvalue"],"name":"itermut"}}],[11,"entries","","Works on `JsonValue::Object` - returns an iterator over key value pairs. Will return an empty iterator if called on non-object types.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"entries_mut","","Works on `JsonValue::Object` - returns a mutable iterator over key value pairs. Will return an empty iterator if called on non-object types.",0,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"remove","","Works on `JsonValue::Object` - remove a key and return the value it held. If the key was not present, the method is called on anything but an object, it will return a null.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"array_remove","","Works on `JsonValue::Array` - remove an entry and return the value it held. If the method is called on anything but an object or if the index is out of bounds, it will return `JsonValue::Null`.",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"clear","","When called on an array or an object, will wipe them clean. When called on a string will clear the string. Numbers and booleans become null.",0,null],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index_mut","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"f64"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"i16"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"i32"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"u32"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"option"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"f32"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"i8"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"generics":["string","jsonvalue","randomstate"],"name":"hashmap"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"u64"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"isize"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"i64"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"generics":["string","jsonvalue"],"name":"btreemap"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"bool"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"u8"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"object"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"number"}],"output":{"name":"jsonvalue"}}],[11,"from","","",0,{"inputs":[{"name":"u16"}],"output":{"name":"jsonvalue"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"jsonvalue"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"jsonvalue"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"jsonvalue"}}],[11,"index","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"jsonvalue"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"number"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"jsonvalue"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"object"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}]],"paths":[[4,"JsonValue"],[4,"Response"],[8,"Responder"],[3,"Server"],[3,"ClientHandler"],[8,"Universe"],[8,"AsJson"],[8,"FromJson"]]};
initSearch(searchIndex);
